				   React Native
.....................................................................................

What is React  Native?
  React Native is lib built for mobile cross platform native mobile apps.
React native has been built on the core concepts of react.js.


What is React.js?
 React.js is javascript lib for building user interfaces.
 User interface apps for web browsers.
 "React is modern SPA lib created by face book based on "Flux Design Pattern"


Architecture for libs and frameworks:


Plain JS
			 Application(dom) -plain js
			     |
			  Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




                             Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		               -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		         Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
...................................................................................
				React Future
.....................................................................................

React was built by face book only for web browsers, later facebook decided to scale react for building other types of user interfaces application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices

.............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first

npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app
.....................................................................................

What is role of react js?
 react js is just javascript lib for building user interface(DOM Programming).

What is DOM?
	 Document Object Model, it is specfication for creating and manipulating dynamic html.

HTML internal work flow:
.......................
index.html -  source code

<html>
 <head>
   <title>HTML</title>
 </head>
 <body>
     <h1>Welcome</h1>
 </body>
</html>
 --------------Browser
  |
 loader : load source code into browser
  |
  uses protocal 
   file or http
  |
  parser : Parser is spcial compiler which converts source code into lexical tree
           (String tree)
   |

html
  head
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
   |
   compiler: Compilation: convert source code into assembly language
   |
html - LOAD XXX
  head-
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
.......................&&&&&&&&&&&&&..........................................  
                                Runtime

During runtime, we need to allocate memory for the program.

Runtime will create LinkedList(c) for the entire html document

html - Node
  head-
   title
      HTML
   title
 head
 body -Node
     h1  - Node
      Welcome
     h1
 body
html

Nodes are connected each other in Hierchical Structure(Tree)

Linking the Nodes (Tree)

body -Node
    |
     h1  - Node
      |
        Welcome
     h1
 body
 |
Layout Engine/Paint Engine
   |
  will convert into pxs - Final Ouput

            At End , the html page is "Tree Data Structure"
..........................***.....................................................
				   React Native
.....................................................................................

What is React  Native?
  React Native is lib built for mobile cross platform native mobile apps.
React native has been built on the core concepts of react.js.


What is React.js?
 React.js is javascript lib for building user interfaces.
 User interface apps for web browsers.
 "React is modern SPA lib created by face book based on "Flux Design Pattern"
Architecture for libs and frameworks:


Plain JS
			 Application(dom) -plain js
			     |
			  Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




                             Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		               -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		         Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
...................................................................................
				React Future
.....................................................................................

React was built by face book only for web browsers, later facebook decided to scale react for building other types of user application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices

.............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first

npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app
.....................................................................................
React Core Concepts:

Why Js?
 JS was created to process HTML pages like create new element,update existing element,remove element,select elements
   This Programming is called "DOM" Programming.

HTML internal work flow:
.......................
index.html -  source code

<html>
 <head>
   <title>HTML</title>
 </head>
 <body>
     <h1>Welcome</h1>
 </body>
</html>
 --------------Browser
  |
 loader : load source code into browser
  |
  uses protocal 
   file or http
  |
  parser : Parser is spcial compiler which converts source code into lexical tree
           (String tree)
   |

html
  head
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
   |
   compiler: Compilation: convert source code into assembly language
   |
html - LOAD XXX
  head-
   title
      HTML
   title
 head
 body
     h1
      Welcome
     h1
 body
html
.......................&&&&&&&&&&&&&..........................................  
                                Runtime

During runtime, we need to allocate memory for the program.

Runtime will create LinkedList(c) for the entire html document

html - Node
  head-
   title
      HTML
   title
 head
 body -Node
     h1  - Node
      Welcome
     h1
 body
html

Nodes are connected each other in Hierchical Structure(Tree)

Linking the Nodes (Tree)

body -Node
    |
     h1  - Node
      |
        Welcome
     h1
 body
 |
Layout Engine/Paint Engine
   |
  will convert into pxs - Final Ouput

            At End , the html page is "Tree Data Structure"
..........................***.....................................................
			The Netscap Communication and HTML Tree
.................................................................................
Netscap started a project,to access rendered "tree" via program.

Netcap initally decided to introduce c program,later who decided to change their mind to "Java".
Java was not also not suitable , the reason was , java was the big language , putting the language inside browser is not suitable.

Netscap finally decided who did not want eiter c or java, but java like language
 - "The Birth of Javascript" 

The Javascript was introduced  as light weight programming language to access the tree,process the tree.

How to reprsent html inside javascript engine?
 
 Netscap took an idea "Object" Model.

Every html element is object, which is created once the browser loads the html into browser,and also object can be created using apis..

Javascript engins forms the tree called "Object Tree"
.....................................................................................
			Netscap Object and W3c
.....................................................................................

After Object tree model and javascript success, W3C  decided to standarize this arch/technology.

After standarization, w3c publish a spec called "DOM" -  Document Object Model

How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                Every Html ELEMENT Inside Browser is "C Program"

	        Every Html ELEMENT Inside javascript engine is "Object"

HTML Elements(p,h1,div,img) are  represented inside browser as "Node", inside Javascript Engine "Object - DOM "


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element
.....................................................................................				DOM Programming
.....................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....
.....................................................................................
How to create dom element using plain js?

function createElement() {
    const Heading = document.createElement('h1')
    Heading.innerHTML = 'Welcome to React'
    //attach on to the existing tree 
    const root = document.getElementById('root')
    root.appendChild(Heading)
}
createElement()


React core lib:

react.js
react-dom.js -  only browser - react-native.js

Objects
React
ReactDOM.


//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";

//declare dom element
const Heading = <h1>Hello React!</h1>

//Get the root element
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Heading)



The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language

JSX Code is not executed by the browser directly rather, it is compiled into plain js, then it is excuted.
..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div><div><h1>Hello</h1></div></div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements

Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sales application , and purchase application.

..............................................................................................
				One Component is not a component
.............................................................................................
In large application, we create more components.
All components we coimbine to make up other big components or application.
Such wiring(connecting) components forms the structure called "component tree".

Component Tree:
   =>Object tree / DOM Tree / Virutal DOM Tree.
.....................................................................................
How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


1.variable pattern

//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";

//variable Pattern
//Heading is just variable which points DOM object/component
const Heading = <h1>Hello React!</h1>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(Heading)

2.functions pattern

import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
function Heading(){
    //should return component  / object 
    return <h1>Welcome to React</h1>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call 
rootElement.render(Heading())

Programming models:
1.imperative programming
   you write logic
   you write infrastructure code
eg: plain js dom code

2.declarative programming
 more readable code
 less infrastructure/boiler plate code-provided by frameworks/libs
 react code.


//imperative way of calling function - it is not recommened.
rootElement.render(Heading()) 

import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
function Heading() {
    //should return component  / object 
    return <h1>Welcome to React</h1>
}
const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)

..............
Functions:
import React from "react";
import ReactDOM from "react-dom/client";

//functions pattern 
//es 5 function 
// function Heading() {
//     //should return component  / object 
//     return <h1>Welcome to React</h1>
// }

//es 6 Arrow Function 
const Heading = () => <h1>Welcome to React</h1>


const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)
...................................................................................
ES 6 class Pattern.
import React from "react";
import ReactDOM from "react-dom/client";

//class component
class Heading extends React.Component {
    render() {
        return <h1>Welcome to React!!</h1>
    }
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

//function call : imperative code 
// rootElement.render(Heading())
//function call : declarative code
rootElement.render(<Heading />)
.....................................................................................
				Component Tree
			     Component Composition
.....................................................................................

DRY

How to create Component tree?

Layouts:

 Page
   Header
   Body 
   Footer

index.js

import React from "react";
import ReactDOM from "react-dom/client";

const Header = () => <header>
    <h1>IBM</h1>
</header>

const Body = () => <div>
    <section>
        <p>this is sample section</p>
    </section>
    <section>
        <p>this is sample section</p>
    </section>
</div>
const Footer = () => <footer>
    <p>Footer</p>
</footer>

const Page = () => <div>
    <Header />
    <Body />
    <Footer/>
</div>


//Root Node 
const App = () => <div>
    <Page />
</div>
..............................................................................
..............................................................................................
				React Dev tools
..............................................................................................

React dev tool is used to visualize the component tree in the browser, without looking the source code ,how the tree has been constructured.

How to install react dev tool?

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

How to use react dev tool?

 1.lanuch application
 2.open dev tool inside chrome

.............................................................................................
				Component Compostion and Modularity
..............................................................................................

In react application, we dont / never dump the code into single file, we need to modularize the application.

File Structure
Is there a recommended way to structure React projects?

  React doesn’t have any opinions on how you put files into folders. 
  That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by "features" or "routes-menu"
  One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
			
common or util /
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
 Another popular way to structure projects is to group similar files together, for example:

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.

               "https://bradfrost.com/blog/post/atomic-web-design/"


File Name conventions:

 FileName must match component feature  - profile 

File Name can be saved as fileName.js or fileName.jsx

Rules for jsx extensions:

-Root file (index,App) files must not be saved with ".jsx" , root files must be saved only with .js extension.

-Barrel export feature must be used in large application.

eg:
src/profile/profile.jsx

const Profile = () => <div>
    <h1>Profile</h1>
</div>

//export default Profile
export { Profile }

src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import { Profile } from "./profile/profile";
//Root Node 
const App = () => <div>
    <Profile/>
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

Task:
  Isloate the layout into separate folders and files 

.....................................................................................
			    JSX Rules
................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 


import React from "react";
import ReactDOM from "react-dom/client";


const Greeting  = ()=>{
   // return <h1>Hello 
   return <h1>Hello</h1>
}
//Root Node 
const App = () => <div>
    <Greeting/>
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)


2. In xml you must have one single root element.
  all elements must be organized under single root element.

const Greeting = () => {
    // return <h1>Hello
    return <div>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </div>

}

In this approach , there is problem in UI design, react forces us to have unncessary
container elements like div

React 16 had introduced a concept called "Fragements" 

What is fragement?
 It is invisble container element which will not be included in the output like.
 Fragements are very usefull for escapping the compiler errors.

There are different syntaxs to write  fragements.

syntax 1
const Greeting = () => {
    return <React.Fragment>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </React.Fragment>
}

syntax 2

const Greeting = () => {
    return <Fragment>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </Fragment>
}

syntax 3
const Greeting = () => {
    return <>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </>
}


3.Component names should start with Uppercase,generally would be noun.

const greeting = () => {
    return <>
        <h1>IBM</h1>
        <p>this is paragraph</p>
    </>
}
react-dom.development.js:86 Warning: The tag <greeting> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at greeting
    at div
    at App


				 How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
}
....................................................................................
...................................................................................
				How to Style components
.....................................................................................

React applies styles via style language

Web
 - CSS
Mobile App
 -platform specific style

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

css /style can be applied to the html elements in two ways

1.during design pattern
 using style or class attribute
2.during runtime -dynamic css
  using js 

js offers style properties as object
 all js css properties given

element.style

React uses this style object to style elements , which is used in react native as well

//dom element using react .
import React from "react";
import ReactDOM from "react-dom/client";
import './App.css'


//style object 
const styleobj = {
    color: 'red',
    backgroundColor: 'yellow',
    border: "thick solid #0000FF"
}
const Heading = () => <>
    <h1 class="App-header">Welcome to React Native</h1>
    <h2 style={styleobj}>React</h2>
</>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<Heading />)

https://www.w3schools.com/cssref/index.php
.....................................................................................
				Dynamic UI- Data binding
.....................................................................................

.....................................................................................
			  Compoent Design Principles of React
.....................................................................................


Data can be declared for a component in two ways.

1.data is supplied from outside the component.
2.data is supplied within the component

1.Data is supplied from outside the component.

When component receives data from the outside, this pattern is called as "property pattern" / props pattern.

Outside the component means what? What is outside for the component?

YOu know very well , react creates components and assembles them in hierachical order(tree)
in the tree model, the one component called as "parent" component and other components are called child component and sibiling components.

outside means "Parent".

    "Data is supplied from the parent compoent to child component" - Props pattern /Property pattern

const Greeter = props => {
    const { message, name } = props
    return <>
        <h2>Child Component</h2>
        <h3>{message} {name}</h3>
    </>
}
.....................................................................................
			What if i dont supply Props to Component -Default Props
.....................................................................................
if you dont pass any property, we can supply default props which saves lot of runtime bugs.

When you design component, it is highly recommended to have default Props- This is best Practice
..............................................................................................
			What if i dont supply Props to Component -Default Props
.............................................................................................
if you dont pass any property, we can supply default props which saves lot of runtime bugs.

When you design component, it is highly recommended to have default Props- This is best Practice

//default Args
function multiply(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    return a * b; //NaN
}
console.log(multiply(6, 3))
console.log(multiply())

import React from "react";
import ReactDOM from "react-dom/client";

const User = props => {
    const { id, name, status, address: { city } } = props
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}


const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        <User id={1} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
..................................................................................
				Props Drilling
...................................................................................

The User interface must be broken into compoents and again which should be broken into child compoents.
import ReactDOM from "react-dom/client";

const USER = {
    id: 1,
    name: "Leanne Graham",
    username: "Bret",
    email: "Sincere@april.biz",
    address: {
        street: "Kulas Light",
        suite: "Apt. 556",
        city: "Gwenborough",
        zipcode: "92998-3874",
        geo: {
            lat: "-37.3159",
            lng: "81.1496"
        }
    },
    phone: "1-770-736-8031 x56442",
    website: "hildegard.org",
    company: {
        name: "Romaguera-Crona",
        catchPhrase: "Multi-layered client-server neural-net",
        bs: "harness real-time e-markets"
    }
}

export const Address = props => {
    return <>
        <h3>Address</h3>
        <p>Street {props.address.street}</p>
        <p>Street {props.address.suite}</p>
        <p>Street {props.address.city}</p>
        <p>Street {props.address.zipcode}</p>
    </>
}
export const Location = props => {

    return <>
        <h3>Location</h3>
        <p>Lat {props.geo.lat}</p>
        <p>Lng {props.geo.lat}</p>
    </>
}
export const Company = props => {
    return <>
        <h3>Company</h3>
        <p>Name {props.company.name}</p>
    </>
}

export const UserInfo = props => {

    return <>
        <h2>Id {props.user.id}</h2>
        <p>Name {props.user.name}</p>
        <p>User Name {props.user.username}</p>
        <p>Email {props.user.email}</p>
        <p>Phone {props.user.phone}</p>
        <p>Url {props.user.website}</p>
    </>
}
//Prop driling
export const User = props => {
    return <>
        <UserInfo user={props.user} />
        <Address address={props.user.address} />
        <Location geo={props.user.address.geo} />
        <Company company={props.user.company} />
    </>
}
//Add default Props

const App = () => {
    return <div>
        <User user={USER} />
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)
..............................................................................................
			Property Validation or Property Constraints
.............................................................................................

Javascript is dynamic typed language, meaning that the type of variable is not verified during compile time.

dyamic typed/weak typing

var a=1;
console.log(a) => 1 => type is number

you can reinitalize the with different types
a="hello"
console.log(a) => "hello" => type is string

In c: - Strongly typed  /static typed
int a=10
a="hello" -compile time error 

Type script : Strongly static typed javascript

let a:number =10;
a="hello"


Inside compoent if pass data , can i enforce the react that accept only the type what i want.

Yes , we can do with help of property validator.
Property validator gives only warning , it wont stop rendering incase there is any type error.


in order to write property rule, react provides a separate lib "prop-types"

npm install --save prop-types


import React from "react";
import ReactDOM from "react-dom/client";
import PropTypes from 'prop-types'

const User = ({ id, name, status, address: { city } }) => {
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}
//setting property validation rules 
User.propTypes = {
    id: PropTypes.number
}


const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        <User id={"1"} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

After running:
react-jsx-dev-runtime.development.js:87 Warning: Failed prop type: Invalid prop `id` of type `string` supplied to `User`, expected `number`.
    at User (http://localhost:3000/static/js/bundle.js:29:5)
    at App
....................................................................................
			 class Components, props,and it features

Now a days class components are moved away from the react  ecyo system- only functions
import React from "react";
import ReactDOM from "react-dom/client";
import PropTypes from 'prop-types'

const User_ = ({ id, name, status, address: { city } }) => {
    return <>
        <h1>Id {id}</h1>
        <h1>Name {name}</h1>
        <h1>Status {status ? "Available" : "Not Available"}</h1>
        <h1>City {city}</h1>
    </>
}

//class components and props 

class User extends React.Component {
    render() {
        //in class component props are available via this.props variable
        //props is base class variable
        const { id, name, status, address: { city } } = this.props
        return <>
            <h1>Id {id}</h1>
            <h1>Name {name}</h1>
            <h1>Status {status ? "Available" : "Not Available"}</h1>
            <h1>City {city}</h1>
        </>
    }
}
//setting default properties
User.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    address: {
        city: 'Your city '
    }
}
//setting property validation rules 
User.propTypes = {
    id: PropTypes.number
}

const App = () => {
    let status = false
    let address = {
        city: 'Coimbatore'
    }
    return <>
        <User />
        {/* <User id={"1"} name="Subramanian" status={true} /> */}
        <User id={1} name="Subramanian" status={true} />

    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

.....................................................................................
			   comments

js comments
//
jsx comments
{/* <User id={"1"} name="Subramanian" status={true} /> */}

....................................................................................
How to break the big UI into smaller and smaller Component and how to share data 
			   Uni Directional Data flow model


eg:
 Comment <------------------------------> CommentData
   -UserInfo 
	|
	<Logo/Avatar>
        User Name
        <Comment-Test>
        <Comment-Data>


import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}

//without breaking 
const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            {/* Segment -1 */}
            <div className="avatar">
                <img src={props.author.avatarUrl} alt="Author Name" />
            </div>
            {/* Segment 2 */}
            <div className="username">
                <p>{props.author.name}</p>
            </div>
            {/* Segment 3 */}
            <div className="commenttext">
                <p>{props.text}</p>
            </div>
            {/* Segment 4 */}
            <div className="commentdate">
                {formateDate(props.date)}
            </div>
        </div>
    </div>
}

const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
...................................................................................

How to extract Components?
Avatar
UserInfo

import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}
export const Avatar = props => {
    return <div className="avatar">
        <img src={props.avatarUrl} alt="Author Name" />
    </div>
}
export const User = props => {
    return <div>
        <p>{props.name}</p>
    </div>
}

export const UserInfo = props => {
    return <div className="userinfo">
        <Avatar avatarUrl={props.author.avatarUrl} />
        <User name={props.author.name} />
    </div>
}
export const CommentDetails = props => {
    return <div>
        <div className="commenttext">
            <p>{props.text}</p>
        </div>
        <div className="commentdate">
            {formateDate(props.date)}
        </div>
    </div>
}
//with breaking 
export const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            <UserInfo author={props.author} />
        </div>
        <div>
            <CommentDetails text={props.text} date={props.date} />
        </div>
    </div>
}


export const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
			 List Rendering
...................................................................................

Arrays are primary datastructure to hold list of items.

List Rendering we can prepare many ui layouts

1.List View
  Ul li
2.Card Layout view
  div
3.Grid layout
  table tr
import ReactDOM from "react-dom/client";
import { PHOTOS } from './mock-data/photos'
import  "./index.css"
/**
 * Array Iteration apis
 *  =>for..each
 *  =>map
 *  =>filter 
 *  =>reduce 
 *we use always map
 */
//List binding

const List = props => {
    const { numList } = props
    return <>
        <h1>List Rendering</h1>
        <ul>
            {
                // numList.map(item => {
                //     console.log(item)
                //     return <li>{item}</li>
                // })
                numList.map(item => <li key={item}>{item}</li>)
            }
        </ul>
    </>
}

const Photo = props => {

    const { photos } = props
    return <div>
        <div>
            {
                photos.map(photo => {
                    return <div key={photo.id}>
                        <h2>id  {photo.id}</h2>
                        <h3>{photo.title}</h3>
                        <img src={photo.thumbnailUrl} alt="Your Pic" />
                    </div>
                })
            }
        </div>
    </div>
}



const App = () => {
    const numList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return <div>
        <List numList={numList} />
        <Photo photos={PHOTOS} />
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

...................................................................................
				State

What is state?
 State is another way of passing data.
 if data is changed, we need to rerender UI

State is represented inside class component by default...
Even we can represent state inside functions as well...

The state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.

Eg:
 Level-1  How to declare state,bind state in ui?

import React from "react";
import ReactDOM from "react-dom/client";

const style = {
    textAlign: 'center',
}
//state 
class Rating extends React.Component {
    //state declaration
    state = {
        rating: 0
    }

    render() {
        console.log(this.state)
        return <div >
            <h1 style={style}>Rating App</h1>
            <div>
                <h2>Rating : {this.state.rating}</h2>
            </div>
        </div>
    }
}

const App = () => {
    return <>
        <Rating />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

...................................................................................
			 How to trigger render cycle

React offers a method called "setState".

in order to understand setState, we need to learn the functional programming principle called "Pure functions and immutablity"
...................................................................................
                              Pure Functions

Rule A:
  If function receives input, the function returns the same input without any mutation.
  Every Component with respect to props, are pure functions.

//pure function
//Rule 1: if function receives input,it returns the same, that function is called pure function.


//This function is pure function 
function getData(message) {
    return message
}
console.log(getData('hello'))

//impure function 
function update(message) {
    message = "test"
    return message
}
console.log(update('something'))


Where is this pure function is used?
  In React Every component is pure function with subject to props.

import React from "react";
import ReactDOM from "react-dom/client";

//pure function : the input parameters(props) are not modified rather just we return
//according to props every component is pure function
const Greeting = props => {
   // props.message = "hai"
    return <div>
        <h1>Message {props.message}</h1>
    </div>
}


const App = () => {
    return <>
        <Greeting message="hello" />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

Rule B:

 What if function receives input, need to be mutated but it should follow the pure function rule.

With help of "Immutablity"

What is immutable?

creating new object every time when you update the object , immutablity.

if the function does that , that function is called pure function.

pure function must return, "immutable object".

//Pure function Rule B

//impure function
function updateCustomer(customer, city) {
    //city 
    customer.city = city
    return customer

}

let customer = {
    id: 1,
    name: 'Subramanian',
    city: 'Delhi'
}
console.log('before update', customer)
let result = updateCustomer(customer, 'Coimbatore')
console.log('after update', result)
console.log('same customer ', customer === result ? 'same' : 'different')
..................................................................................
				Pure and Immutable
//Pure function Rule B

//impure function
function updateCustomer__(customer, city) {
    //city 
    customer.city = city
    return customer
}

//pure function : using immutable objects 
//immutable object , you have to create new object for any changes
//way -1
// function updateCustomer(customer, city) {
//     return {
//         id: customer.id,
//         name: customer.name,
//         city: city
//     }
// }
// //way 2- Object.assign - clone api to clone safely of existing object
// function updateCustomer(customer, city) {
//     return Object.assign({}, customer, { city: city })
// }

//way 3: Using spread operator(es 7 )feature to clone the object  ... 
//way 2- Object.assign - clone api to clone safely of existing object
function updateCustomer(customer, city) {
    //return { ...customer, city: city }
    return { ...customer, city }

}


let customer = {
    id: 1,
    name: 'Subramanian',
    city: 'Delhi'
}
console.log('before update', customer)
....................................................................................

import ReactDOM from "react-dom/client";
import React from "react";


//Class component which declares state:
/**
 * props are data which are sent from parent to child 
 * state are data which are encapuslated within component
 * 
 */
class Counter extends React.Component {

    //declare state for this component
    state = {
        //component specific data
        counter: 0 // initial state
    }
    //listener declaration
    onIncrement = () => {
        // this.state.counter++
        // console.log('state =>', this.state)
        //we should not call render method explcitly, if you do so, there is no impact on ui render.
        //we need to tell react engine to trigger render cycle.
        //this.render()
        //we need to use setState method 
        this.setState(previousState => {
            console.log('Previous State /Old State =>', previousState)
            //You must return immutable object
            // return {
            //     counter: previousState.counter + 1
            // }
            // return Object.assign({}, previousState, { counter: previousState.counter + 1 })
            return { ...previousState, counter: previousState.counter + 1 }
        })
    }

    render() {
        console.log('Current State => ', this.state)
        return <div>
            <h1>Counter App -State </h1>
            <h2>Counter {this.state.counter} </h2>
            {/* Event Binding */}
            <button onClick={this.onIncrement}>+</button>
        </div>
    }
}

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
...................................................................................
			 Props and state -Dynamic props- state as prop
....................................................................................

import ReactDOM from "react-dom/client";
import React from "react";

//state and listener as prop

class Counter extends React.Component {

    //data
    state = {
        counter: 0
    }
    //biz logic
    onIncrement = () => {
        this.setState(previousState => {
            console.log('Previous State /Old State =>', previousState)
            return { ...previousState, counter: previousState.counter + 1 }
        })
    }

    render() {
        //user interface
        return <div>
            {/* Counter and onIncrement as prop  */}
            <CounterDisplay counter={this.state.counter} onIncrement={this.onIncrement} />
        </div>
    }
}

//Presentational Component : The component which has only ui not state and biz logic 
const CounterDisplay = props => {

    return <>
        <h1>Counter App -State </h1>
        <h2>Counter {props.counter} </h2>
        <button onClick={props.onIncrement}>+</button>
    </>
}

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
				Multi State
...................................................................................
import ReactDOM from "react-dom/client";
import React from "react";


class Counter extends React.Component {

    //data
    state = {
        incValue: 0,
        decValue: 100
    }
    //biz logic
    onIncrement = () => {
        this.setState(previousState => {
            console.log('Previous State /Old State =>', previousState)
            return { ...previousState, incValue: previousState.incValue + 1 }
        })
    }
    onDecrement = () => {
        this.setState(previousState => {
            console.log('Previous State /Old State =>', previousState)
            return { ...previousState, decValue: previousState.decValue - 1 }
        })
    }

    render() {
        //user interface
        console.log('current State =>', this.state)
        return <div>
            {/* Counter and onIncrement as prop  */}
            {/* <CounterDisplay decValue={this.state.decValue} incValue={this.state.incValue} onIncrement={this.onIncrement} onDecrement={this.onDecrement} /> */}
            {/* Rest/Spread operator to merge proproperties */}
            {/* {...this.state} means we pass all state variable prop */}
            <CounterDisplay {...this.state} onIncrement={this.onIncrement} onDecrement={this.onDecrement} />
        </div>
    }
}

const CounterDisplay = ({ incValue, decValue, onIncrement,onDecrement }) => <>
    <h1>Counter App -State </h1>
    <h2>Counter Increment {incValue} | Decrement {decValue} </h2>
    <button onClick={onIncrement}>+</button>
    <button onClick={onDecrement}>-</button>

</>

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
.....................................................................................
				Arrays and Immutablity
....................................................................................


//impure function
//array push method modifies existing array memory address
//push is mutable api : dont use
// function addTodo(todos, todo) {
//     return todos.push(todo)
// }
// //pure function
// function addTodo(todos, todo) {
//     return todos.concat(todo)
// }
//spread operator
//pure function
function addTodo(todos, todo) {
    return [...todos,todo]
}

let todos = [{
    title: 'Learn react',
    done: true
}];
let addedTodos = addTodo(todos, { title: 'Learn Pure functions', done: false })
console.log(todos === addedTodos ? "Same" : "Different")

Array Pure functions api

1.concat - add
2.map - iterations
3.filter - iterations with filtering
4.reduce - 

import ReactDOM from "react-dom/client";
import React from "react";


class Todo extends React.Component {

    //data
    state = {
        todos: [{ id: 0, title: 'learn react', completed: false }]
    }
    onAdd = () => {
        this.setState(previousState => {
            console.log('state', previousState)
            //mutate array
            let newTodo = {
                id: Math.random(),
                title: 'learn new Things',
                completed: false
            }
           // return { ...previousState, todos: previousState.todos.concat(newTodo) }
           return { ...previousState, todos:[...previousState.todos,newTodo] }
        })
    }
    render() {
        const { todos } = this.state
        return <div>
            {
                todos.map(todo => {
                    return <div key={todo.id}>
                        <p>id : {todo.id}</p>
                        <p>title: {todo.title}</p>
                        <p>Status: {todo.completed ? 'done' : 'Not Done'}</p>
                    </div>
                })
            }
            <h1>Add New Todo</h1>
            <button onClick={this.onAdd}>+</button>
        </div>
    }
}



const App = () => {
    return <div style={{ margin: 50 }}>
        <Todo />
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

....................................................................................
			How to remove class for state mutations
			    How to introduce functions
....................................................................................
Hooks:
 
What is a hook?
 It is a function that let you use state and other react features without writing class
 Hook abstract lot of complexity with respect class components.
 Hook gives a clear path to write statefull components using functions itself

Class components vs function components(hook)

=>if you write some logic inside class, the same logic i want to reuse in other component which is not possible, you have duplicate the code
=>hooks aka functional components are going to separate out common logic and we can reuse across the application.

import ReactDOM from "react-dom/client";
import React, { useState } from "react";


class Counter__ extends React.Component {

    state = {
        counter: 0 // initial state
    }
    onIncrement = () => {
        this.setState(previousState => {
            console.log('Previous State /Old State =>', previousState)
            return { ...previousState, counter: previousState.counter + 1 }
        })
    }

    render() {
        console.log('Current State => ', this.state)
        return <div>
            <h1>Counter App -State </h1>
            <h2>Counter {this.state.counter} </h2>
            <button onClick={this.onIncrement}>+</button>
        </div>
    }
}
////////////////////////////////////////////////////////////////////////////////////
//Functional Component with state
/**
 * 
 * The class component state must be object  state = {}
 * The functional component using hooks state can be even primitive, even though if you write primitive behind the scene it will be object only
 * in hooks we never use setState method instead we can use our own setState eq pure funcitons
 *  
 */
const Counter = props => {
    //state declaration
    const [counter, setCounter] = useState(0)

    //listener 
    // const onIncrement = () => {
    //     // setCounter(previousCounter => {
    //     //     console.log('Previous State /Old State =>', previousCounter)
    //     //     return previousCounter + 1
    //     // })
    //     setCounter(counter + 1)
    // }

    console.log('Current State =>', counter)
    // return <CounterDisplay counter={counter} setCounter={setCounter} />
    return <CounterDisplay counter={counter} onIncrement={setCounter} />


}

const CounterDisplay = ({ counter, onIncrement }) => {
    return <>
        <h1>Counter App -Using Hooks </h1>
        <h2>Counter {counter}</h2>
        {/* <button onClick={onIncrement}>+</button> */}
        {/* Inline Listener */}
        <button onClick={() => {
            onIncrement(counter + 1)
        }}>+</button>
    </>
}

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
				Multi state with hooks
import ReactDOM from "react-dom/client";
import { useState } from "react";

const Counter = props => {
    //state declaration
    const [incValue, setIncValue] = useState(0)
    const [decValue, setDecValue] = useState(100)

    return <CounterDisplay incValue={incValue} decValue={decValue} onDecrement={setDecValue} onIncrement={setIncValue} />
}

const CounterDisplay = ({ incValue, decValue, onIncrement, onDecrement }) => {
    return <>
        <h2>Incrementer {incValue} | Decrementer {decValue}</h2>
        <button onClick={() => {
            onIncrement(incValue + 1)
        }}>+</button>
        <button onClick={() => {
            onDecrement(decValue - 1)
        }}>-</button>
    </>
}

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
			 Object as State inside hook

import ReactDOM from "react-dom/client";
import { useState } from "react";

const Counter = props => {
    const [counter, setCounter] = useState({ incValue: 0, decValue: 100 })

    const onIncrement = () => {
        // setCounter(prevCounter => {
        //     return { ...prevCounter, incValue: prevCounter.incValue + 1 }
        // })
        // setCounter(prevCounter => ({ ...prevCounter, incValue: prevCounter.incValue + 1 }))
        setCounter(({ ...counter, incValue: counter.incValue + 1 }))
    }

    return <>
        <h1>Counter Hooks Using Object</h1>
        <h2>Counter Incrementer {counter.incValue} | Decrementer {counter.decValue}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            setCounter(prevCounter => {
                return { ...prevCounter, decValue: prevCounter.decValue - 1 }
            })
        }}>-</button>

    </>
}

const App = () => {
    return <>
        <Counter />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
.....................................................................................
			  Component Life Cycles 
.....................................................................................

Component Life has three stages

1.Mount stage
  When a component is initalized and mounted into target(browser/native)
2.Update Stage
  When user interacts
3.UnMount Stage
  When compoent is removed from the tree.

1.Mount stage
  
 render : 
   It is called for preparing virtual Object tree
  inside render we write jsx code
 componentDidMount
   It is called once the virtual Object tree becomes real nodes inside browser or native.
  it is usefull for lazy logics like inital ajax calls,websockets,timers...


demo with class compoents


import ReactDOM from "react-dom/client";
import React from 'react'

//parent compoent
class Parent extends React.Component {
    constructor() {
        super()
        console.log('parent constructor is called')
    }
    render() {
        console.log('parent render is called')
        return <>
            <h1>Parent Compoent</h1>
            <Child/>
        </>
    }
    componentDidMount(){
        console.log('parent componentDidMount is called')
    }
}

class Child extends React.Component {
    constructor() {
        super()
        console.log('Child constructor is called')
    }
    render() {
        console.log('Child render is called')
        return <>
            <h1>Child Compoent</h1>
        </>
    }
    componentDidMount(){
        console.log('Child componentDidMount is called')
    }
}

const App = () => {
    return <>
        <Parent />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
......................................................................................
import ReactDOM from "react-dom/client";
import React, { useEffect } from 'react'

//parent compoent
const Parent = () => {
    //Component did Mount
    useEffect(() => {
        console.log('parent componentDidMount is called')
    }, [])
    console.log('Parent render is called')
    return <>
        <h1>Parent Compoent</h1>
        <Child />
    </>
}

//child compoenent
const Child = () => {
    //Component did Mount
    useEffect(() => {
        console.log('Child componentDidMount is called')
    }, [])
    console.log('Child render is called')
    return <>
        <h1>Child Compoent</h1>
    </>
}

const App = () => {
    return <>
        <Parent />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)

........................................................................................................................................................................
			  Component Life cycles and Hooks
....................................................................................
comonentDidMount:
 Used for doing some resource intensive tasks, such as setting up ajax calls for inital page.
 It is called after inital render

compoentDidUpdate:
  called after every update finishes.

How to write these two life cycle methods inside functional components.
//hooks : componentDidMount - useEffect
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'


const Todos = props => {
    //state
    const [state, setState] = useState({
        error: null,
        isLoaded: false, //spiner status
        todos: [] // data
    })

    //componentDidMount
    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/todos')
            .then(response => response.json())
            .then(todos => {
                setTimeout(() => {
                    setState(prevState => ({ ...prevState, todos: prevState.todos.concat(todos), isLoaded: true }))
                }, 5000)
            })
            .catch(err => {
                setState(prevState => ({ ...prevState, isLoaded: true, error: err }))
            });
    }, [])

    //render code

    const { error, isLoaded, todos } = state;
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <div>
            <h1>Todo App</h1>
            <ul>
                {state.todos.map(todo => {
                    return <li key={todo.id}>{todo.title}</li>
                })}
            </ul>
        </div>
    }



}

const Error = props => {
    return <>
        <h2>{props.error}</h2>
    </>
}
const Spinner = props => {
    return <>
        <h2 style={{ backgroundColor: 'yellow' }}>Loading...</h2>
    </>
}


const App = props => <div>
    <h1>Ajax calls inside FuncitionalComponent</h1>
    <Todos />
</div>

ReactDOM.render(<App />, document.getElementById('root'))


With async await:
................
import ReactDOM from "react-dom/client";
import React, { useEffect, useState } from 'react'

const POSTAPI = () => {
    const url = 'https://jsonplaceholder.typicode.com/posts'
    return fetch(url);
}


//parent compoent
const Posts = () => {
    //state
    const [state, setState] = useState({
        error: null,  // to show error 
        isLoaded: false, //spiner status
        posts: [] // data
    })

    async function fetchData() {
        // You can await here
        try {
            // const response = await POSTAPI();
            // const posts = await response.json()
            const posts = await (await POSTAPI()).json()
            setState(prevState => ({ ...prevState, posts: prevState.posts.concat(posts), isLoaded: true }))
        }
        catch (err) {
            setState(prevState => ({ ...prevState, isLoaded: true, error: err }))
        }

    }
    //componentDidMount
    useEffect(() => {
        fetchData();
    }, [])



    {/* Here we need to display three different things: Error,loader,data */ }
    {/* Conditional Rendering */ }
    const { error, isLoaded, posts } = state
    if (error) {
        return <>Error</>
    } else if (!isLoaded) {
        return <>Loading....</>
    } else {
        return <div>
            <h1>Posts App</h1>
            <ul>
                {posts.map(post => {
                    return <li key={post.id}>{post.title}</li>
                })}
            </ul>
        </div>
    }

}


const App = () => {
    return <div style={{ marginTop: 50, marginLeft: 150, color: 'blueviolet', fontStyle: 'oblique' }}>
        <Posts />
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
.....................................................................................
import ReactDOM from "react-dom/client";
import React, { useEffect, useState } from 'react'

const PHOTOSAPI = () => {
    const url = 'https://jsonplaceholder.typicode.com/photos'
    return fetch(url);
}


//parent compoent
const Photos = () => {
    //state
    const [state, setState] = useState({
        error: null,  // to show error 
        isLoaded: false, //spiner status
        photos: [] // data
    })

    async function fetchData() {
        // You can await here
        try {
            const photos = await (await PHOTOSAPI()).json()
            setState(prevState => ({ ...prevState, photos: prevState.photos.concat(photos), isLoaded: true }))
        }
        catch (err) {
            setState(prevState => ({ ...prevState, isLoaded: true, error: err }))
        }

    }
    //componentDidMount
    useEffect(() => {
        fetchData();
    }, [])



    {/* Here we need to display three different things: Error,loader,data */ }
    {/* Conditional Rendering */ }
    const { error, isLoaded, photos } = state
    if (error) {
        return <>Error</>
    } else if (!isLoaded) {
        return <>Loading....</>
    } else {
        return <div>
            <h1>Photo App</h1>
            <div>
                {photos.map(photo => {
                    return <div>
                        <h1>{photo.title}</h1>
                        <img src={photo.thumbnailUrl} alt="Your pic" />
                    </div>
                })}
            </div>
        </div>
    }

}


const App = () => {
    return <div style={{ marginTop: 50, marginLeft: 150, color: 'blueviolet', fontStyle: 'oblique' }}>
        <Photos />
    </div>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)












